[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project]
name = "{{ python_package_distribution_name }}"
description = "{{ project_description }}"
authors = [
    {name = "{{ author_fullname }}", email = "{{ author_email }}"}
]
license = {text = "{{ copyright_license }}"}
readme = "README.md"
requires-python = "{{ python_package_requires_python }}"
dependencies = [
    # keep-sorted start
    "aeromancy @ git+ssh://git@github.com/quant-aq/aeromancy.git",
] # keep-sorted end
dynamic = ["version"]

classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3"
]

[project.urls]
Repository = "https://github.com/{{ repository_namespace }}/{{ repository_name }}"
Homepage = "https://github.com/{{ repository_namespace }}/{{ repository_name }}"

[tool.pdm.version]
source = "scm"

[tool.pdm.build]
package-dir = "src"

[tool.pdm.dev-dependencies]
dev = [
    # keep-sorted start
    "parver>=0.3",
    "pytest>=6.1",
    # keep-sorted end
]

doc = [
    # keep-sorted start
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.1",
    "mkdocs-material>=6.2",
    "mkdocs-section-index>=0.3.6",
    "mkdocs>=1.1",
    "mkdocstrings-python>=1.1.2",
    "mkdocstrings>=0.22.0",
    # keep-sorted end
]

[tool.pdm.scripts]
#
# Standard development scripts (not Aeromancy related).
#
test.help = "Run tests in current environment"
test.cmd = "pytest tests/"

doc.help = "Start the dev server for doc preview"
doc.shell = "cd docs && mkdocs serve -a localhost:8010"

lint.help = "Run linters over all files"
lint.cmd = "pre-commit run --all-files"

#
# Standard Aeromancy scripts.
#
go.help = "Main entry point for running this project in Aeromancy"
go.cmd = """python -maeromancy.runner
  --extra-docker-run-args='-v ./ingest:/base/ingest'
"""

debug_shell.help = "Open a shell in the Aeromancy Docker container (don't run any experiments)"
debug_shell.cmd = "pdm go --debug-shell"

aeroview.help = "View basic information about an Aeromancy artifact"
aeroview.cmd = "python -maeromancy.aeroview"

rerun.help = "Rerun a specific Weights and Biases job"
rerun.cmd = "python -maeromancy.rerun"
rerun.env = { PDM_IGNORE_ACTIVE_VENV = "true" }

help.help = "Show the combined help menu (Aeromancy runtime + job selection + project-specific options)"
help.cmd = "python src/main.py --help"

aeroset.help = "Use a specific reference/tag/version of Aeromancy"
aeroset.shell = """pdm remove aeromancy ;
  pdm add 'git+ssh://git@github.com/quant-aq/aeromancy.git@{args}' &&
  pdm install &&
  pre-commit run keep-sorted --files pyproject.toml > /dev/null
"""

[tool.black]
line-length = 88
target-version = ["py310"]

[tool.ruff]
line-length = 88
select = [
  # keep-sorted start
  "ASYNC", # flake8-async
  "B",     # flake8-bugbear
  "BLE",   # flake8-blind-except
  "C4",    # flake8-comprehensions
  "COM",   # flake8-commas
  "D",     # pydocstyle
  "DTZ",   # flake8-datetimez
  "E",     # pycodestyle error
  "EXE",   # flake8-executable
  "F",     # pyflakes
  "FA",    # flake8-future-annotations
  "FLY",   # flynt
  "I",     # isort
  "ICN",   # flake8-import-conventions
  "INP",   # flake8-no-pep420
  "ISC",   # flake8-implicit-str-concat
  "N",     # pep8-naming
  "NPY",   # numpy-specific rules
  "PD",    # pandas-vet
  "PERF",  # perflint
  "PGH",   # pygrep-hooks
  "PIE",   # flake8-pie
  "PT",    # flake8-pytest-style
  "PTH",   # flake8-use-pathlib
  "PYI",   # flake8-pyi
  "Q",     # flake8-quotes
  "RET",   # flake8-return
  "RSE",   # flake8-raise
  "RUF",   # ruff-specific
  "S",     # flake8-bandit
  "SIM",   # flake8-simplify
  "SLOT",  # flake8-slot
  "T10",   # flake8-debugger
  "TD",    # flake8-todos
  "TID",   # flake8-tidy-imports
  "TRY",   # tryceratops
  "UP",    # pyupgrade
  "W",     # pycodestyle warning
  "YTT",   # flake8-2020
  # keep-sorted end
]
extend-ignore = [
  # keep-sorted start
  "D203",   # one-blank-line-before-class (incompatible with D211)
  "D213",   # multi-line-summary-second-line (incompatible with D212)
  "PGH003", # blanket-type-ignore: Use specific rule codes when ignoring type issues (no always feasible)
  "RET504", # unnecessary-assign: Sometimes worth doing for readability
  "RET505", # superfluous-else-return: Currently has a bug
  "RET506", # superfluous-else-raise: Currently has a bug
  "S603",   # subprocess-without-shell-equals-true: Bug: https://github.com/astral-sh/ruff/issues/4045
  "SIM300", # yoda-conditions: Doesn't work well with Pandas
  "TD002",  # missing-todo-author: Not for prototyping
  "TD003",  # missing-todo-link: Not for prototyping
  "TRY003", # raise-vanilla-args: Not for prototyping, not always an error
  # keep-sorted end
]
src = ["src"]
extend-exclude = ["tests/fixtures", "__pycache__"]
target-version = "py310"
namespace-packages = ["docs", "tasks"]

[tool.ruff.per-file-ignores]
"**/tests/*" = ["S101"]  # Allow using asserts in tests

[tool.ruff.isort]
known-first-party = ["{{python_package_import_name}}"]

[tool.mypy]
follow_imports = "silent"
ignore_missing_imports = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
disallow_untyped_decorators = true
namespace_packages = true
mypy_path = "src"
explicit_package_bases = true

[tool.isort]
profile = "black"
atomic = true
skip_glob = ["*/setup.py"]
filter_files = true
known_first_party = ["{{python_package_import_name}}"]

[tool.pytest.ini_options]
filterwarnings = [
  "ignore::DeprecationWarning"
]

 [tool.ruff.pydocstyle]
 convention = "numpy"
