"""Aeromancy `ActionBuilder` for {{ project_name }}."""

from pathlib import Path

from aeromancy import Action, ActionBuilder, S3Object, Tracker
from typing_extensions import override


class BogusParentAction(Action):
    """Bogus Aeromancy `Action` for testing.

    Prints a message to let you know it ran and creates an output artifact.
    """

    job_type = "parent"
    job_group = "bogus"

    @override
    def outputs(self) -> list[str]:
        return ["bogus-parent"]

    @override
    def run(self, tracker: Tracker) -> None:
        output_path = Path("/tmp/bogus-output1.txt")  # noqa: S108
        output_path.write_text("BogusParentAction output!\n")

        [output_name] = self.outputs()
        tracker.declare_output(
            name=output_name,
            local_filenames=[output_path],
            s3_destination=S3Object("bogus-bucket", "key1/"),
            artifact_type="bogus-artifact",
            metadata={"meaning-of-life": 42},
            strip_prefix=Path("/tmp"),  # noqa: S108
        )
        print("Hello world from BogusParentAction.")


class BogusChildAction(Action):
    """Bogus Aeromancy `Action` for testing.

    Prints a message to let you know it ran and reads an input artifact from the
    parent.
    """

    job_type = "child"
    job_group = "bogus"

    @override
    def outputs(self) -> list[str]:
        return ["bogus-child"]

    @override
    def run(self, tracker: Tracker) -> None:
        [input_artifact], _ = self.get_io()
        [input_path] = tracker.declare_input(input_artifact)

        print("Hello world from BogusChildAction.")
        print(
            "Parent action created artifact with this text: "
            f"{input_path.read_text()!r}",
        )


# TODO: Rename this class to something more specific.
class ExampleActionBuilder(ActionBuilder):
    """ActionBuilder for {{ project_name }}."""

    def __init__(
        self,
    ):
        """Create an `ActionBuilder` for {{ project_name }}."""
        ActionBuilder.__init__(self, project_name="{{python_package_import_name}}")

    @override
    def build_actions(self) -> list[Action]:
        actions = []

        parent_action = self.add_action(actions, BogusParentAction(parents=[]))
        self.add_action(actions, BogusChildAction(parents=[parent_action]))
        return actions
