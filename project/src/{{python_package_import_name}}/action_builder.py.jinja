"""Aeromancy `ActionBuilder` for {{ project_name }}."""

from aeromancy import Action, ActionBuilder
from typing_extensions import override

from {{python_package_import_name}}.actions import (
    ExampleEvaluationAction,
    ExampleStoreAction,
    ExampleTrainAction,
)


# An ActionBuilder is responsible for constructing a dependency graph of
# Actions. It also can take in configuration parameters from the command line to
# pass to Actions etc. Here, we take a learning_rate parameter which we'll pass
# to the training action.
class ExampleActionBuilder(ActionBuilder):
    """ActionBuilder for {{ project_name }}."""

    def __init__(
        self,
        learning_rate: float,
    ):
        """Create an `ActionBuilder` for {{ project_name }}."""
        # The project name is for organizational purposes and will be the
        # project name in Weights and Biases.
        ActionBuilder.__init__(self, project_name="{{python_package_import_name}}")

        self.learning_rate = learning_rate

    # This method is responsible for generating the dependency graph of Actions.
    @override
    def build_actions(self) -> list[Action]:
        actions = []

        # Build each Action in sequence. Note that we use the helper method
        # add_action rather than appending to the list directly, since
        # add_action needs to do some work behind the scenes.
        store_action = self.add_action(actions, ExampleStoreAction(parents=[]))
        train_action = self.add_action(
            actions,
            ExampleTrainAction(
                store_dataset=store_action,
                learning_rate=self.learning_rate,
            ),
        )
        self.add_action(
            actions,
            ExampleEvaluationAction(
                store_dataset=store_action,
                train_model=train_action,
            ),
        )
        return actions
